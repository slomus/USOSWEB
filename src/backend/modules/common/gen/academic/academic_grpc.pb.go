// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: academic.proto

package academic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubjectsService_GetSubjects_FullMethodName       = "/academic.SubjectsService/GetSubjects"
	SubjectsService_GetSubjectDetails_FullMethodName = "/academic.SubjectsService/GetSubjectDetails"
)

// SubjectsServiceClient is the client API for SubjectsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubjectsServiceClient interface {
	GetSubjects(ctx context.Context, in *GetSubjectsRequest, opts ...grpc.CallOption) (*GetSubjectsResponse, error)
	GetSubjectDetails(ctx context.Context, in *GetSubjectDetailsRequest, opts ...grpc.CallOption) (*GetSubjectDetailsResponse, error)
}

type subjectsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubjectsServiceClient(cc grpc.ClientConnInterface) SubjectsServiceClient {
	return &subjectsServiceClient{cc}
}

func (c *subjectsServiceClient) GetSubjects(ctx context.Context, in *GetSubjectsRequest, opts ...grpc.CallOption) (*GetSubjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubjectsResponse)
	err := c.cc.Invoke(ctx, SubjectsService_GetSubjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectsServiceClient) GetSubjectDetails(ctx context.Context, in *GetSubjectDetailsRequest, opts ...grpc.CallOption) (*GetSubjectDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubjectDetailsResponse)
	err := c.cc.Invoke(ctx, SubjectsService_GetSubjectDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubjectsServiceServer is the server API for SubjectsService service.
// All implementations must embed UnimplementedSubjectsServiceServer
// for forward compatibility.
type SubjectsServiceServer interface {
	GetSubjects(context.Context, *GetSubjectsRequest) (*GetSubjectsResponse, error)
	GetSubjectDetails(context.Context, *GetSubjectDetailsRequest) (*GetSubjectDetailsResponse, error)
	mustEmbedUnimplementedSubjectsServiceServer()
}

// UnimplementedSubjectsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubjectsServiceServer struct{}

func (UnimplementedSubjectsServiceServer) GetSubjects(context.Context, *GetSubjectsRequest) (*GetSubjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjects not implemented")
}
func (UnimplementedSubjectsServiceServer) GetSubjectDetails(context.Context, *GetSubjectDetailsRequest) (*GetSubjectDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjectDetails not implemented")
}
func (UnimplementedSubjectsServiceServer) mustEmbedUnimplementedSubjectsServiceServer() {}
func (UnimplementedSubjectsServiceServer) testEmbeddedByValue()                         {}

// UnsafeSubjectsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubjectsServiceServer will
// result in compilation errors.
type UnsafeSubjectsServiceServer interface {
	mustEmbedUnimplementedSubjectsServiceServer()
}

func RegisterSubjectsServiceServer(s grpc.ServiceRegistrar, srv SubjectsServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubjectsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubjectsService_ServiceDesc, srv)
}

func _SubjectsService_GetSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectsServiceServer).GetSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectsService_GetSubjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectsServiceServer).GetSubjects(ctx, req.(*GetSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectsService_GetSubjectDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectsServiceServer).GetSubjectDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectsService_GetSubjectDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectsServiceServer).GetSubjectDetails(ctx, req.(*GetSubjectDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubjectsService_ServiceDesc is the grpc.ServiceDesc for SubjectsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubjectsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "academic.SubjectsService",
	HandlerType: (*SubjectsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubjects",
			Handler:    _SubjectsService_GetSubjects_Handler,
		},
		{
			MethodName: "GetSubjectDetails",
			Handler:    _SubjectsService_GetSubjectDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academic.proto",
}

const (
	EnrollmentsService_EnrollSubject_FullMethodName          = "/academic.EnrollmentsService/EnrollSubject"
	EnrollmentsService_UnenrollSubject_FullMethodName        = "/academic.EnrollmentsService/UnenrollSubject"
	EnrollmentsService_GetMyEnrollments_FullMethodName       = "/academic.EnrollmentsService/GetMyEnrollments"
	EnrollmentsService_CheckScheduleConflicts_FullMethodName = "/academic.EnrollmentsService/CheckScheduleConflicts"
)

// EnrollmentsServiceClient is the client API for EnrollmentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnrollmentsServiceClient interface {
	EnrollSubject(ctx context.Context, in *EnrollSubjectRequest, opts ...grpc.CallOption) (*EnrollSubjectResponse, error)
	UnenrollSubject(ctx context.Context, in *UnenrollSubjectRequest, opts ...grpc.CallOption) (*UnenrollSubjectResponse, error)
	GetMyEnrollments(ctx context.Context, in *GetMyEnrollmentsRequest, opts ...grpc.CallOption) (*GetMyEnrollmentsResponse, error)
	CheckScheduleConflicts(ctx context.Context, in *CheckScheduleConflictsRequest, opts ...grpc.CallOption) (*CheckScheduleConflictsResponse, error)
}

type enrollmentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnrollmentsServiceClient(cc grpc.ClientConnInterface) EnrollmentsServiceClient {
	return &enrollmentsServiceClient{cc}
}

func (c *enrollmentsServiceClient) EnrollSubject(ctx context.Context, in *EnrollSubjectRequest, opts ...grpc.CallOption) (*EnrollSubjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnrollSubjectResponse)
	err := c.cc.Invoke(ctx, EnrollmentsService_EnrollSubject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentsServiceClient) UnenrollSubject(ctx context.Context, in *UnenrollSubjectRequest, opts ...grpc.CallOption) (*UnenrollSubjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnenrollSubjectResponse)
	err := c.cc.Invoke(ctx, EnrollmentsService_UnenrollSubject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentsServiceClient) GetMyEnrollments(ctx context.Context, in *GetMyEnrollmentsRequest, opts ...grpc.CallOption) (*GetMyEnrollmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyEnrollmentsResponse)
	err := c.cc.Invoke(ctx, EnrollmentsService_GetMyEnrollments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentsServiceClient) CheckScheduleConflicts(ctx context.Context, in *CheckScheduleConflictsRequest, opts ...grpc.CallOption) (*CheckScheduleConflictsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckScheduleConflictsResponse)
	err := c.cc.Invoke(ctx, EnrollmentsService_CheckScheduleConflicts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnrollmentsServiceServer is the server API for EnrollmentsService service.
// All implementations must embed UnimplementedEnrollmentsServiceServer
// for forward compatibility.
type EnrollmentsServiceServer interface {
	EnrollSubject(context.Context, *EnrollSubjectRequest) (*EnrollSubjectResponse, error)
	UnenrollSubject(context.Context, *UnenrollSubjectRequest) (*UnenrollSubjectResponse, error)
	GetMyEnrollments(context.Context, *GetMyEnrollmentsRequest) (*GetMyEnrollmentsResponse, error)
	CheckScheduleConflicts(context.Context, *CheckScheduleConflictsRequest) (*CheckScheduleConflictsResponse, error)
	mustEmbedUnimplementedEnrollmentsServiceServer()
}

// UnimplementedEnrollmentsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnrollmentsServiceServer struct{}

func (UnimplementedEnrollmentsServiceServer) EnrollSubject(context.Context, *EnrollSubjectRequest) (*EnrollSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollSubject not implemented")
}
func (UnimplementedEnrollmentsServiceServer) UnenrollSubject(context.Context, *UnenrollSubjectRequest) (*UnenrollSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnenrollSubject not implemented")
}
func (UnimplementedEnrollmentsServiceServer) GetMyEnrollments(context.Context, *GetMyEnrollmentsRequest) (*GetMyEnrollmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyEnrollments not implemented")
}
func (UnimplementedEnrollmentsServiceServer) CheckScheduleConflicts(context.Context, *CheckScheduleConflictsRequest) (*CheckScheduleConflictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckScheduleConflicts not implemented")
}
func (UnimplementedEnrollmentsServiceServer) mustEmbedUnimplementedEnrollmentsServiceServer() {}
func (UnimplementedEnrollmentsServiceServer) testEmbeddedByValue()                            {}

// UnsafeEnrollmentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnrollmentsServiceServer will
// result in compilation errors.
type UnsafeEnrollmentsServiceServer interface {
	mustEmbedUnimplementedEnrollmentsServiceServer()
}

func RegisterEnrollmentsServiceServer(s grpc.ServiceRegistrar, srv EnrollmentsServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnrollmentsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnrollmentsService_ServiceDesc, srv)
}

func _EnrollmentsService_EnrollSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentsServiceServer).EnrollSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrollmentsService_EnrollSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentsServiceServer).EnrollSubject(ctx, req.(*EnrollSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentsService_UnenrollSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnenrollSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentsServiceServer).UnenrollSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrollmentsService_UnenrollSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentsServiceServer).UnenrollSubject(ctx, req.(*UnenrollSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentsService_GetMyEnrollments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyEnrollmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentsServiceServer).GetMyEnrollments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrollmentsService_GetMyEnrollments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentsServiceServer).GetMyEnrollments(ctx, req.(*GetMyEnrollmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentsService_CheckScheduleConflicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckScheduleConflictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentsServiceServer).CheckScheduleConflicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrollmentsService_CheckScheduleConflicts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentsServiceServer).CheckScheduleConflicts(ctx, req.(*CheckScheduleConflictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnrollmentsService_ServiceDesc is the grpc.ServiceDesc for EnrollmentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnrollmentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "academic.EnrollmentsService",
	HandlerType: (*EnrollmentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollSubject",
			Handler:    _EnrollmentsService_EnrollSubject_Handler,
		},
		{
			MethodName: "UnenrollSubject",
			Handler:    _EnrollmentsService_UnenrollSubject_Handler,
		},
		{
			MethodName: "GetMyEnrollments",
			Handler:    _EnrollmentsService_GetMyEnrollments_Handler,
		},
		{
			MethodName: "CheckScheduleConflicts",
			Handler:    _EnrollmentsService_CheckScheduleConflicts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academic.proto",
}
