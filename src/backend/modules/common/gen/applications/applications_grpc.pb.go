// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: applications.proto

package applications

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApplicationsService_GetApplications_FullMethodName           = "/modules.common.api.ApplicationsService/GetApplications"
	ApplicationsService_CreateOrUpdateApplication_FullMethodName = "/modules.common.api.ApplicationsService/CreateOrUpdateApplication"
	ApplicationsService_GetApplicationCategories_FullMethodName  = "/modules.common.api.ApplicationsService/GetApplicationCategories"
	ApplicationsService_CreateOrUpdateCategory_FullMethodName    = "/modules.common.api.ApplicationsService/CreateOrUpdateCategory"
)

// ApplicationsServiceClient is the client API for ApplicationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationsServiceClient interface {
	GetApplications(ctx context.Context, in *GetApplicationsRequest, opts ...grpc.CallOption) (*GetApplicationsResponse, error)
	CreateOrUpdateApplication(ctx context.Context, in *CreateOrUpdateApplicationRequest, opts ...grpc.CallOption) (*CreateOrUpdateApplicationResponse, error)
	GetApplicationCategories(ctx context.Context, in *GetApplicationCategorsRequest, opts ...grpc.CallOption) (*GetApplicationCategoriesResponse, error)
	CreateOrUpdateCategory(ctx context.Context, in *CreateOrUpdateCategoryRequest, opts ...grpc.CallOption) (*CreateOrUpdateCategoryResponse, error)
}

type applicationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationsServiceClient(cc grpc.ClientConnInterface) ApplicationsServiceClient {
	return &applicationsServiceClient{cc}
}

func (c *applicationsServiceClient) GetApplications(ctx context.Context, in *GetApplicationsRequest, opts ...grpc.CallOption) (*GetApplicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApplicationsResponse)
	err := c.cc.Invoke(ctx, ApplicationsService_GetApplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) CreateOrUpdateApplication(ctx context.Context, in *CreateOrUpdateApplicationRequest, opts ...grpc.CallOption) (*CreateOrUpdateApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrUpdateApplicationResponse)
	err := c.cc.Invoke(ctx, ApplicationsService_CreateOrUpdateApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) GetApplicationCategories(ctx context.Context, in *GetApplicationCategorsRequest, opts ...grpc.CallOption) (*GetApplicationCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApplicationCategoriesResponse)
	err := c.cc.Invoke(ctx, ApplicationsService_GetApplicationCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsServiceClient) CreateOrUpdateCategory(ctx context.Context, in *CreateOrUpdateCategoryRequest, opts ...grpc.CallOption) (*CreateOrUpdateCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrUpdateCategoryResponse)
	err := c.cc.Invoke(ctx, ApplicationsService_CreateOrUpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationsServiceServer is the server API for ApplicationsService service.
// All implementations must embed UnimplementedApplicationsServiceServer
// for forward compatibility.
type ApplicationsServiceServer interface {
	GetApplications(context.Context, *GetApplicationsRequest) (*GetApplicationsResponse, error)
	CreateOrUpdateApplication(context.Context, *CreateOrUpdateApplicationRequest) (*CreateOrUpdateApplicationResponse, error)
	GetApplicationCategories(context.Context, *GetApplicationCategorsRequest) (*GetApplicationCategoriesResponse, error)
	CreateOrUpdateCategory(context.Context, *CreateOrUpdateCategoryRequest) (*CreateOrUpdateCategoryResponse, error)
	mustEmbedUnimplementedApplicationsServiceServer()
}

// UnimplementedApplicationsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApplicationsServiceServer struct{}

func (UnimplementedApplicationsServiceServer) GetApplications(context.Context, *GetApplicationsRequest) (*GetApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplications not implemented")
}
func (UnimplementedApplicationsServiceServer) CreateOrUpdateApplication(context.Context, *CreateOrUpdateApplicationRequest) (*CreateOrUpdateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateApplication not implemented")
}
func (UnimplementedApplicationsServiceServer) GetApplicationCategories(context.Context, *GetApplicationCategorsRequest) (*GetApplicationCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationCategories not implemented")
}
func (UnimplementedApplicationsServiceServer) CreateOrUpdateCategory(context.Context, *CreateOrUpdateCategoryRequest) (*CreateOrUpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateCategory not implemented")
}
func (UnimplementedApplicationsServiceServer) mustEmbedUnimplementedApplicationsServiceServer() {}
func (UnimplementedApplicationsServiceServer) testEmbeddedByValue()                             {}

// UnsafeApplicationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationsServiceServer will
// result in compilation errors.
type UnsafeApplicationsServiceServer interface {
	mustEmbedUnimplementedApplicationsServiceServer()
}

func RegisterApplicationsServiceServer(s grpc.ServiceRegistrar, srv ApplicationsServiceServer) {
	// If the following call pancis, it indicates UnimplementedApplicationsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApplicationsService_ServiceDesc, srv)
}

func _ApplicationsService_GetApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationsService_GetApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetApplications(ctx, req.(*GetApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_CreateOrUpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).CreateOrUpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationsService_CreateOrUpdateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).CreateOrUpdateApplication(ctx, req.(*CreateOrUpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_GetApplicationCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationCategorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).GetApplicationCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationsService_GetApplicationCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).GetApplicationCategories(ctx, req.(*GetApplicationCategorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationsService_CreateOrUpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServiceServer).CreateOrUpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationsService_CreateOrUpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServiceServer).CreateOrUpdateCategory(ctx, req.(*CreateOrUpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationsService_ServiceDesc is the grpc.ServiceDesc for ApplicationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modules.common.api.ApplicationsService",
	HandlerType: (*ApplicationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApplications",
			Handler:    _ApplicationsService_GetApplications_Handler,
		},
		{
			MethodName: "CreateOrUpdateApplication",
			Handler:    _ApplicationsService_CreateOrUpdateApplication_Handler,
		},
		{
			MethodName: "GetApplicationCategories",
			Handler:    _ApplicationsService_GetApplicationCategories_Handler,
		},
		{
			MethodName: "CreateOrUpdateCategory",
			Handler:    _ApplicationsService_CreateOrUpdateCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "applications.proto",
}
