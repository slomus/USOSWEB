// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: course.proto

package course

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CourseService_GetAllCourses_FullMethodName        = "/course.CourseService/GetAllCourses"
	CourseService_GetCourseDetails_FullMethodName     = "/course.CourseService/GetCourseDetails"
	CourseService_GetCourseSubjects_FullMethodName    = "/course.CourseService/GetCourseSubjects"
	CourseService_SearchCourses_FullMethodName        = "/course.CourseService/SearchCourses"
	CourseService_GetCourseStats_FullMethodName       = "/course.CourseService/GetCourseStats"
	CourseService_GetFaculties_FullMethodName         = "/course.CourseService/GetFaculties"
	CourseService_GetStudentCourseInfo_FullMethodName = "/course.CourseService/GetStudentCourseInfo"
)

// CourseServiceClient is the client API for CourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseServiceClient interface {
	GetAllCourses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllCoursesResponse, error)
	// Pobiera szczegóły konkretnego kierunku
	GetCourseDetails(ctx context.Context, in *GetCourseDetailsRequest, opts ...grpc.CallOption) (*GetCourseDetailsResponse, error)
	// Pobiera przedmioty dla konkretnego kierunku
	GetCourseSubjects(ctx context.Context, in *GetCourseSubjectsRequest, opts ...grpc.CallOption) (*GetCourseSubjectsResponse, error)
	// Wyszukuje kierunki według filtrów
	SearchCourses(ctx context.Context, in *SearchCoursesRequest, opts ...grpc.CallOption) (*SearchCoursesResponse, error)
	// Pobiera statystyki kierunków
	GetCourseStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCourseStatsResponse, error)
	// Pobiera wszystkie wydziały (pomocnicze dla filtrowania)
	GetFaculties(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetFacultiesResponse, error)
	GetStudentCourseInfo(ctx context.Context, in *GetStudentCourseInfoRequest, opts ...grpc.CallOption) (*GetStudentCourseInfoResponse, error)
}

type courseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseServiceClient(cc grpc.ClientConnInterface) CourseServiceClient {
	return &courseServiceClient{cc}
}

func (c *courseServiceClient) GetAllCourses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllCoursesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllCoursesResponse)
	err := c.cc.Invoke(ctx, CourseService_GetAllCourses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetCourseDetails(ctx context.Context, in *GetCourseDetailsRequest, opts ...grpc.CallOption) (*GetCourseDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseDetailsResponse)
	err := c.cc.Invoke(ctx, CourseService_GetCourseDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetCourseSubjects(ctx context.Context, in *GetCourseSubjectsRequest, opts ...grpc.CallOption) (*GetCourseSubjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseSubjectsResponse)
	err := c.cc.Invoke(ctx, CourseService_GetCourseSubjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) SearchCourses(ctx context.Context, in *SearchCoursesRequest, opts ...grpc.CallOption) (*SearchCoursesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchCoursesResponse)
	err := c.cc.Invoke(ctx, CourseService_SearchCourses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetCourseStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCourseStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseStatsResponse)
	err := c.cc.Invoke(ctx, CourseService_GetCourseStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetFaculties(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetFacultiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFacultiesResponse)
	err := c.cc.Invoke(ctx, CourseService_GetFaculties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetStudentCourseInfo(ctx context.Context, in *GetStudentCourseInfoRequest, opts ...grpc.CallOption) (*GetStudentCourseInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentCourseInfoResponse)
	err := c.cc.Invoke(ctx, CourseService_GetStudentCourseInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServiceServer is the server API for CourseService service.
// All implementations must embed UnimplementedCourseServiceServer
// for forward compatibility.
type CourseServiceServer interface {
	GetAllCourses(context.Context, *emptypb.Empty) (*GetAllCoursesResponse, error)
	// Pobiera szczegóły konkretnego kierunku
	GetCourseDetails(context.Context, *GetCourseDetailsRequest) (*GetCourseDetailsResponse, error)
	// Pobiera przedmioty dla konkretnego kierunku
	GetCourseSubjects(context.Context, *GetCourseSubjectsRequest) (*GetCourseSubjectsResponse, error)
	// Wyszukuje kierunki według filtrów
	SearchCourses(context.Context, *SearchCoursesRequest) (*SearchCoursesResponse, error)
	// Pobiera statystyki kierunków
	GetCourseStats(context.Context, *emptypb.Empty) (*GetCourseStatsResponse, error)
	// Pobiera wszystkie wydziały (pomocnicze dla filtrowania)
	GetFaculties(context.Context, *emptypb.Empty) (*GetFacultiesResponse, error)
	GetStudentCourseInfo(context.Context, *GetStudentCourseInfoRequest) (*GetStudentCourseInfoResponse, error)
	mustEmbedUnimplementedCourseServiceServer()
}

// UnimplementedCourseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCourseServiceServer struct{}

func (UnimplementedCourseServiceServer) GetAllCourses(context.Context, *emptypb.Empty) (*GetAllCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCourses not implemented")
}
func (UnimplementedCourseServiceServer) GetCourseDetails(context.Context, *GetCourseDetailsRequest) (*GetCourseDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseDetails not implemented")
}
func (UnimplementedCourseServiceServer) GetCourseSubjects(context.Context, *GetCourseSubjectsRequest) (*GetCourseSubjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseSubjects not implemented")
}
func (UnimplementedCourseServiceServer) SearchCourses(context.Context, *SearchCoursesRequest) (*SearchCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCourses not implemented")
}
func (UnimplementedCourseServiceServer) GetCourseStats(context.Context, *emptypb.Empty) (*GetCourseStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseStats not implemented")
}
func (UnimplementedCourseServiceServer) GetFaculties(context.Context, *emptypb.Empty) (*GetFacultiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFaculties not implemented")
}
func (UnimplementedCourseServiceServer) GetStudentCourseInfo(context.Context, *GetStudentCourseInfoRequest) (*GetStudentCourseInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentCourseInfo not implemented")
}
func (UnimplementedCourseServiceServer) mustEmbedUnimplementedCourseServiceServer() {}
func (UnimplementedCourseServiceServer) testEmbeddedByValue()                       {}

// UnsafeCourseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseServiceServer will
// result in compilation errors.
type UnsafeCourseServiceServer interface {
	mustEmbedUnimplementedCourseServiceServer()
}

func RegisterCourseServiceServer(s grpc.ServiceRegistrar, srv CourseServiceServer) {
	// If the following call pancis, it indicates UnimplementedCourseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CourseService_ServiceDesc, srv)
}

func _CourseService_GetAllCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetAllCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_GetAllCourses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetAllCourses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetCourseDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetCourseDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_GetCourseDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetCourseDetails(ctx, req.(*GetCourseDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetCourseSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetCourseSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_GetCourseSubjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetCourseSubjects(ctx, req.(*GetCourseSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_SearchCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).SearchCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_SearchCourses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).SearchCourses(ctx, req.(*SearchCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetCourseStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetCourseStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_GetCourseStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetCourseStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetFaculties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetFaculties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_GetFaculties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetFaculties(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetStudentCourseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentCourseInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetStudentCourseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseService_GetStudentCourseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetStudentCourseInfo(ctx, req.(*GetStudentCourseInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseService_ServiceDesc is the grpc.ServiceDesc for CourseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "course.CourseService",
	HandlerType: (*CourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCourses",
			Handler:    _CourseService_GetAllCourses_Handler,
		},
		{
			MethodName: "GetCourseDetails",
			Handler:    _CourseService_GetCourseDetails_Handler,
		},
		{
			MethodName: "GetCourseSubjects",
			Handler:    _CourseService_GetCourseSubjects_Handler,
		},
		{
			MethodName: "SearchCourses",
			Handler:    _CourseService_SearchCourses_Handler,
		},
		{
			MethodName: "GetCourseStats",
			Handler:    _CourseService_GetCourseStats_Handler,
		},
		{
			MethodName: "GetFaculties",
			Handler:    _CourseService_GetFaculties_Handler,
		},
		{
			MethodName: "GetStudentCourseInfo",
			Handler:    _CourseService_GetStudentCourseInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course.proto",
}
