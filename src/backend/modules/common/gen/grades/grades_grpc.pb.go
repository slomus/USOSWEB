// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: grades.proto

package grades

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GradesService_ListGrades_FullMethodName = "/grades.GradesService/ListGrades"
	GradesService_AddGrade_FullMethodName   = "/grades.GradesService/AddGrade"
)

// GradesServiceClient is the client API for GradesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GradesServiceClient interface {
	ListGrades(ctx context.Context, in *ListGradesRequest, opts ...grpc.CallOption) (*ListGradesResponse, error)
	AddGrade(ctx context.Context, in *AddGradeRequest, opts ...grpc.CallOption) (*AddGradeResponse, error)
}

type gradesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGradesServiceClient(cc grpc.ClientConnInterface) GradesServiceClient {
	return &gradesServiceClient{cc}
}

func (c *gradesServiceClient) ListGrades(ctx context.Context, in *ListGradesRequest, opts ...grpc.CallOption) (*ListGradesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGradesResponse)
	err := c.cc.Invoke(ctx, GradesService_ListGrades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradesServiceClient) AddGrade(ctx context.Context, in *AddGradeRequest, opts ...grpc.CallOption) (*AddGradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddGradeResponse)
	err := c.cc.Invoke(ctx, GradesService_AddGrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GradesServiceServer is the server API for GradesService service.
// All implementations must embed UnimplementedGradesServiceServer
// for forward compatibility.
type GradesServiceServer interface {
	ListGrades(context.Context, *ListGradesRequest) (*ListGradesResponse, error)
	AddGrade(context.Context, *AddGradeRequest) (*AddGradeResponse, error)
	mustEmbedUnimplementedGradesServiceServer()
}

// UnimplementedGradesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGradesServiceServer struct{}

func (UnimplementedGradesServiceServer) ListGrades(context.Context, *ListGradesRequest) (*ListGradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrades not implemented")
}
func (UnimplementedGradesServiceServer) AddGrade(context.Context, *AddGradeRequest) (*AddGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGrade not implemented")
}
func (UnimplementedGradesServiceServer) mustEmbedUnimplementedGradesServiceServer() {}
func (UnimplementedGradesServiceServer) testEmbeddedByValue()                       {}

// UnsafeGradesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GradesServiceServer will
// result in compilation errors.
type UnsafeGradesServiceServer interface {
	mustEmbedUnimplementedGradesServiceServer()
}

func RegisterGradesServiceServer(s grpc.ServiceRegistrar, srv GradesServiceServer) {
	// If the following call pancis, it indicates UnimplementedGradesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GradesService_ServiceDesc, srv)
}

func _GradesService_ListGrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradesServiceServer).ListGrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradesService_ListGrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradesServiceServer).ListGrades(ctx, req.(*ListGradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradesService_AddGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradesServiceServer).AddGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradesService_AddGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradesServiceServer).AddGrade(ctx, req.(*AddGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GradesService_ServiceDesc is the grpc.ServiceDesc for GradesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GradesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grades.GradesService",
	HandlerType: (*GradesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGrades",
			Handler:    _GradesService_ListGrades_Handler,
		},
		{
			MethodName: "AddGrade",
			Handler:    _GradesService_AddGrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grades.proto",
}
