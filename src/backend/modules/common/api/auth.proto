syntax = 'proto3';

package modules.common.api;

import "google/api/annotations.proto";

option go_package = "github.com/slomus/USOSWEB/src/backend/common/gen/auth;auth";

// Wiadomo≈õci

message LoginRequest {
  string email = 10;
  string password = 11;
}

message LoginResponse {
  string message = 10;
  int64 expires_in = 11;
}

message LogoutRequest {
  string refresh_token = 10;
  string access_token = 11;
}

message LogoutResponse {
  bool success = 10;
  string message = 11;
}

message RegisterRequest {
  string email = 11;
  string password = 12;
  string name = 13;
}

message RegisterResponse {
  bool success = 10;
  string message = 11;
  int64 user_id = 12;
}

message RefreshTokenRequest { string refresh_token = 10; }

message RefreshTokenResponse {
  string message = 10;
  int64 expires_in = 11;
}

message ForgotPasswordRequest { string email = 10; }

message ForgotPasswordResponse {
  bool success = 10;
  string message = 11;
}

message ResetPasswordRequest {
  string token = 10;
  string new_password = 11;
}

message ResetPasswordResponse {
  bool success = 10;
  string message = 11;
}

message GetUserNameRequest {}

message GetUserNameResponse {
  string username = 10;
  string message = 11;
  bool success = 12;
  int64 status = 13;
}

message HelloRequest {}

message HelloResponse { string message = 10; }

message User {
  int64 user_id = 10;
  string name = 11;
  string surname = 12;
  string email = 13;
  bool active = 14;
  string role = 15; // "student", "teacher", "admin", "unknown"
}

message GetUsersRequest {}

message GetUsersResponse {
  repeated User users = 10;
  bool success = 11;
  string message = 12;
  int64 status = 13;
}

message GetUserDataRequest {}

message GetUserDataResponse {
  User user = 10;
  bool success = 11;
  string message = 12;
  int64 status = 13;
}

message GetUserRoleRequest { int64 user_id = 10; }

message GetUserRoleResponse {
  string role = 10;
  bool success = 11;
  string message = 12;
  int64 status = 13;
}

// Serwis

service AuthService {
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post : "/api/auth/login"
      body : "*"
    };
  }

  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post : "/api/auth/logout"
      body : "*"
    };
  }

  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post : "/api/auth/register"
      body : "*"
    };
  }

  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post : "/api/auth/refresh"
      body : "*"
    };
  }

  rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse) {
    option (google.api.http) = {
      post : "/api/auth/forgot-password"
      body : "*"
    };
  }

  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post : "/api/auth/reset-password"
      body : "*"
    };
  }

  rpc GetUserName(GetUserNameRequest) returns (GetUserNameResponse) {
    option (google.api.http) = {
      get : "/api/auth/username"
    };
  }

  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {
    option (google.api.http) = {
      get : "/api/auth/users"
    };
  }

  rpc GetUserData(GetUserDataRequest) returns (GetUserDataResponse) {
    option (google.api.http) = {
      get : "/api/auth/user"
    };
  }

  rpc GetUserRole(GetUserRoleRequest) returns (GetUserRoleResponse) {
    option (google.api.http) = {
      get : "/api/auth/role"
    };
  }
}

service AuthHello {
  rpc SayHello(HelloRequest) returns (HelloResponse) {
    option (google.api.http) = {
      get : "/api/hello"
    };
  }
}
