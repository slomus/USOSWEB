syntax = "proto3";

package academic;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/slomus/USOSWEB/src/backend/modules/common/gen/academic;academic";

message TimeSlot {
  string day_of_week = 1;      
  string start_time = 2;      
  string end_time = 3;        
  int32 classroom = 4;        
  string building_name = 5;   
}

message ClassInfo {
  int32 class_id = 1;
  string class_type = 2;        
  int32 group_nr = 3;          
  int32 current_capacity = 4;  
  int32 capacity = 5;          
  int32 available_spots = 6;   
  repeated TimeSlot schedule = 7;  
  repeated string instructors = 8;
}

message RegistrationPeriod {
  string start_date = 1;       
  string end_date = 2;        
  bool is_active = 3;        
}

message SubjectSummary {
  int32 subject_id = 1;
  string alias = 2;    
  string name = 3;    
  float ects = 4;
  int32 total_capacity = 5;  
  int32 total_enrolled = 6;  
  int32 available_spots = 7; 
  bool is_enrolled = 8;     
  RegistrationPeriod registration_period = 9;
}

message SubjectDetails {
  int32 subject_id = 1;
  string alias = 2;
  string name = 3;
  float ects = 4;
  string description = 5;
  string syllabus = 6;
  repeated ClassInfo classes = 7;    
  RegistrationPeriod registration_period = 8;
  bool is_enrolled = 9;
}

message GetSubjectsRequest {
  optional int32 course_id = 1; 
  optional int32 semester = 2;   
}

message GetSubjectsResponse {
  repeated SubjectSummary subjects = 1;
  string message = 2;
}

message GetSubjectDetailsRequest {
  int32 subject_id = 1;
}

message GetSubjectDetailsResponse {
  SubjectDetails subject = 1;
  string message = 2;
}

message Enrollment {
  int32 subject_id = 1;
  string subject_name = 2;
  repeated ClassInfo enrolled_classes = 3;  
  google.protobuf.Timestamp enrolled_at = 4;
}


message EnrollSubjectRequest {
  int32 subject_id = 1;
  repeated int32 class_ids = 2;  
}

message EnrollSubjectResponse {
  bool success = 1;
  string message = 2;
  Enrollment enrollment = 3;
}

message UnenrollSubjectRequest {
  int32 subject_id = 1;
}

message UnenrollSubjectResponse {
  bool success = 1;
  string message = 2;
}

message GetMyEnrollmentsRequest {
}

message GetMyEnrollmentsResponse {
  repeated Enrollment enrollments = 1;
  string message = 2;
}

message CheckScheduleConflictsRequest {
  repeated int32 class_ids = 1;
}

message ScheduleConflict {
  int32 class_id_1 = 1;
  int32 class_id_2 = 2;
  string subject_name_1 = 3;
  string subject_name_2 = 4;
  TimeSlot conflicting_time = 5;
}

message CheckScheduleConflictsResponse {
  bool has_conflicts = 1;
  repeated ScheduleConflict conflicts = 2;
  string message = 3;
}


service SubjectsService {
  rpc GetSubjects(GetSubjectsRequest) returns (GetSubjectsResponse) {
    option (google.api.http) = {
      get: "/api/subjects"
    };
  }

  rpc GetSubjectDetails(GetSubjectDetailsRequest) returns (GetSubjectDetailsResponse) {
    option (google.api.http) = {
      get: "/api/subjects/{subject_id}"
    };
  }
}

service EnrollmentsService {
  rpc EnrollSubject(EnrollSubjectRequest) returns (EnrollSubjectResponse) {
    option (google.api.http) = {
      post: "/api/enrollments"
      body: "*"
    };
  }

  rpc UnenrollSubject(UnenrollSubjectRequest) returns (UnenrollSubjectResponse) {
    option (google.api.http) = {
      delete: "/api/enrollments/{subject_id}"
    };
  }

  rpc GetMyEnrollments(GetMyEnrollmentsRequest) returns (GetMyEnrollmentsResponse) {
    option (google.api.http) = {
      get: "/api/enrollments"
    };
  }

  rpc CheckScheduleConflicts(CheckScheduleConflictsRequest) returns (CheckScheduleConflictsResponse) {
    option (google.api.http) = {
      post: "/api/enrollments/check-conflicts"
      body: "*"
    };
  }
}
