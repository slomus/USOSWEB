// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.32.0
// source: calendar.proto

package calendar

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Calendar Event Messages
type CalendarEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       int64                  `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartTime     string                 `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // RFC3339 format
	EndTime       string                 `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // RFC3339 format
	Location      string                 `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	EventType     string                 `protobuf:"bytes,7,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`  // lecture, exam, lab, etc.
	ClassId       int64                  `protobuf:"varint,8,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`       // reference to classes table
	CreatedBy     int64                  `protobuf:"varint,9,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"` // user_id who created
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalendarEvent) Reset() {
	*x = CalendarEvent{}
	mi := &file_calendar_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalendarEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEvent) ProtoMessage() {}

func (x *CalendarEvent) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEvent.ProtoReflect.Descriptor instead.
func (*CalendarEvent) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{0}
}

func (x *CalendarEvent) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *CalendarEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CalendarEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CalendarEvent) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CalendarEvent) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *CalendarEvent) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CalendarEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *CalendarEvent) GetClassId() int64 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *CalendarEvent) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

type GetUserEventsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StartDate     string                 `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"` // RFC3339 format
	EndDate       string                 `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`       // RFC3339 format
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserEventsRequest) Reset() {
	*x = GetUserEventsRequest{}
	mi := &file_calendar_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserEventsRequest) ProtoMessage() {}

func (x *GetUserEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserEventsRequest.ProtoReflect.Descriptor instead.
func (*GetUserEventsRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserEventsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserEventsRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetUserEventsRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type GetUserEventsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Events        []*CalendarEvent       `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserEventsResponse) Reset() {
	*x = GetUserEventsResponse{}
	mi := &file_calendar_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserEventsResponse) ProtoMessage() {}

func (x *GetUserEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserEventsResponse.ProtoReflect.Descriptor instead.
func (*GetUserEventsResponse) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserEventsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetUserEventsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetUserEventsResponse) GetEvents() []*CalendarEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CreateEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	StartTime     string                 `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       string                 `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Location      string                 `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	EventType     string                 `protobuf:"bytes,6,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	ClassId       int64                  `protobuf:"varint,7,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	CreatedBy     int64                  `protobuf:"varint,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEventRequest) Reset() {
	*x = CreateEventRequest{}
	mi := &file_calendar_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRequest) ProtoMessage() {}

func (x *CreateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRequest.ProtoReflect.Descriptor instead.
func (*CreateEventRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{3}
}

func (x *CreateEventRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateEventRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateEventRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CreateEventRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *CreateEventRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateEventRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *CreateEventRequest) GetClassId() int64 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *CreateEventRequest) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

type CreateEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Event         *CalendarEvent         `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEventResponse) Reset() {
	*x = CreateEventResponse{}
	mi := &file_calendar_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventResponse) ProtoMessage() {}

func (x *CreateEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventResponse.ProtoReflect.Descriptor instead.
func (*CreateEventResponse) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{4}
}

func (x *CreateEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateEventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateEventResponse) GetEvent() *CalendarEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type GetClassScheduleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClassId       int64                  `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	StartDate     string                 `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       string                 `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClassScheduleRequest) Reset() {
	*x = GetClassScheduleRequest{}
	mi := &file_calendar_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClassScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassScheduleRequest) ProtoMessage() {}

func (x *GetClassScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassScheduleRequest.ProtoReflect.Descriptor instead.
func (*GetClassScheduleRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{5}
}

func (x *GetClassScheduleRequest) GetClassId() int64 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *GetClassScheduleRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetClassScheduleRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type GetClassScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Events        []*CalendarEvent       `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClassScheduleResponse) Reset() {
	*x = GetClassScheduleResponse{}
	mi := &file_calendar_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClassScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassScheduleResponse) ProtoMessage() {}

func (x *GetClassScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassScheduleResponse.ProtoReflect.Descriptor instead.
func (*GetClassScheduleResponse) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{6}
}

func (x *GetClassScheduleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetClassScheduleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetClassScheduleResponse) GetEvents() []*CalendarEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type AcademicCalendarEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventId       int64                  `protobuf:"varint,10,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventType     string                 `protobuf:"bytes,11,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Title         string                 `protobuf:"bytes,12,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	StartDate     string                 `protobuf:"bytes,14,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       string                 `protobuf:"bytes,15,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	AcademicYear  string                 `protobuf:"bytes,16,opt,name=academic_year,json=academicYear,proto3" json:"academic_year,omitempty"`
	AppliesTo     string                 `protobuf:"bytes,17,opt,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcademicCalendarEvent) Reset() {
	*x = AcademicCalendarEvent{}
	mi := &file_calendar_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcademicCalendarEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcademicCalendarEvent) ProtoMessage() {}

func (x *AcademicCalendarEvent) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcademicCalendarEvent.ProtoReflect.Descriptor instead.
func (*AcademicCalendarEvent) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{7}
}

func (x *AcademicCalendarEvent) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *AcademicCalendarEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *AcademicCalendarEvent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AcademicCalendarEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AcademicCalendarEvent) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *AcademicCalendarEvent) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *AcademicCalendarEvent) GetAcademicYear() string {
	if x != nil {
		return x.AcademicYear
	}
	return ""
}

func (x *AcademicCalendarEvent) GetAppliesTo() string {
	if x != nil {
		return x.AppliesTo
	}
	return ""
}

type GetAcademicCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartDate     *string                `protobuf:"bytes,10,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	EndDate       *string                `protobuf:"bytes,11,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
	AcademicYear  *string                `protobuf:"bytes,12,opt,name=academic_year,json=academicYear,proto3,oneof" json:"academic_year,omitempty"`
	EventType     *string                `protobuf:"bytes,13,opt,name=event_type,json=eventType,proto3,oneof" json:"event_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAcademicCalendarRequest) Reset() {
	*x = GetAcademicCalendarRequest{}
	mi := &file_calendar_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAcademicCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAcademicCalendarRequest) ProtoMessage() {}

func (x *GetAcademicCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAcademicCalendarRequest.ProtoReflect.Descriptor instead.
func (*GetAcademicCalendarRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{8}
}

func (x *GetAcademicCalendarRequest) GetStartDate() string {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return ""
}

func (x *GetAcademicCalendarRequest) GetEndDate() string {
	if x != nil && x.EndDate != nil {
		return *x.EndDate
	}
	return ""
}

func (x *GetAcademicCalendarRequest) GetAcademicYear() string {
	if x != nil && x.AcademicYear != nil {
		return *x.AcademicYear
	}
	return ""
}

func (x *GetAcademicCalendarRequest) GetEventType() string {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return ""
}

type GetAcademicCalendarResponse struct {
	state               protoimpl.MessageState   `protogen:"open.v1"`
	Success             bool                     `protobuf:"varint,10,opt,name=success,proto3" json:"success,omitempty"`
	Message             string                   `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	Events              []*AcademicCalendarEvent `protobuf:"bytes,12,rep,name=events,proto3" json:"events,omitempty"`
	CurrentAcademicYear *AcademicYearInfo        `protobuf:"bytes,13,opt,name=current_academic_year,json=currentAcademicYear,proto3" json:"current_academic_year,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetAcademicCalendarResponse) Reset() {
	*x = GetAcademicCalendarResponse{}
	mi := &file_calendar_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAcademicCalendarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAcademicCalendarResponse) ProtoMessage() {}

func (x *GetAcademicCalendarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAcademicCalendarResponse.ProtoReflect.Descriptor instead.
func (*GetAcademicCalendarResponse) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{9}
}

func (x *GetAcademicCalendarResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAcademicCalendarResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAcademicCalendarResponse) GetEvents() []*AcademicCalendarEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetAcademicCalendarResponse) GetCurrentAcademicYear() *AcademicYearInfo {
	if x != nil {
		return x.CurrentAcademicYear
	}
	return nil
}

type AcademicYearInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Year             string                 `protobuf:"bytes,10,opt,name=year,proto3" json:"year,omitempty"`
	CurrentSemester  string                 `protobuf:"bytes,11,opt,name=current_semester,json=currentSemester,proto3" json:"current_semester,omitempty"`
	CurrentWeek      int32                  `protobuf:"varint,12,opt,name=current_week,json=currentWeek,proto3" json:"current_week,omitempty"`
	SemesterStart    string                 `protobuf:"bytes,13,opt,name=semester_start,json=semesterStart,proto3" json:"semester_start,omitempty"`
	SemesterEnd      string                 `protobuf:"bytes,14,opt,name=semester_end,json=semesterEnd,proto3" json:"semester_end,omitempty"`
	ExamSessionStart string                 `protobuf:"bytes,15,opt,name=exam_session_start,json=examSessionStart,proto3" json:"exam_session_start,omitempty"`
	ExamSessionEnd   string                 `protobuf:"bytes,16,opt,name=exam_session_end,json=examSessionEnd,proto3" json:"exam_session_end,omitempty"`
	Holidays         []string               `protobuf:"bytes,17,rep,name=holidays,proto3" json:"holidays,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AcademicYearInfo) Reset() {
	*x = AcademicYearInfo{}
	mi := &file_calendar_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcademicYearInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcademicYearInfo) ProtoMessage() {}

func (x *AcademicYearInfo) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcademicYearInfo.ProtoReflect.Descriptor instead.
func (*AcademicYearInfo) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{10}
}

func (x *AcademicYearInfo) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *AcademicYearInfo) GetCurrentSemester() string {
	if x != nil {
		return x.CurrentSemester
	}
	return ""
}

func (x *AcademicYearInfo) GetCurrentWeek() int32 {
	if x != nil {
		return x.CurrentWeek
	}
	return 0
}

func (x *AcademicYearInfo) GetSemesterStart() string {
	if x != nil {
		return x.SemesterStart
	}
	return ""
}

func (x *AcademicYearInfo) GetSemesterEnd() string {
	if x != nil {
		return x.SemesterEnd
	}
	return ""
}

func (x *AcademicYearInfo) GetExamSessionStart() string {
	if x != nil {
		return x.ExamSessionStart
	}
	return ""
}

func (x *AcademicYearInfo) GetExamSessionEnd() string {
	if x != nil {
		return x.ExamSessionEnd
	}
	return ""
}

func (x *AcademicYearInfo) GetHolidays() []string {
	if x != nil {
		return x.Holidays
	}
	return nil
}

type GetCurrentSemesterInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCurrentSemesterInfoRequest) Reset() {
	*x = GetCurrentSemesterInfoRequest{}
	mi := &file_calendar_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentSemesterInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentSemesterInfoRequest) ProtoMessage() {}

func (x *GetCurrentSemesterInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentSemesterInfoRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentSemesterInfoRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{11}
}

type GetCurrentSemesterInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,10,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	SemesterInfo  *AcademicYearInfo      `protobuf:"bytes,12,opt,name=semester_info,json=semesterInfo,proto3" json:"semester_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCurrentSemesterInfoResponse) Reset() {
	*x = GetCurrentSemesterInfoResponse{}
	mi := &file_calendar_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentSemesterInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentSemesterInfoResponse) ProtoMessage() {}

func (x *GetCurrentSemesterInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentSemesterInfoResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentSemesterInfoResponse) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{12}
}

func (x *GetCurrentSemesterInfoResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetCurrentSemesterInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCurrentSemesterInfoResponse) GetSemesterInfo() *AcademicYearInfo {
	if x != nil {
		return x.SemesterInfo
	}
	return nil
}

type CreateAcademicEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventType     string                 `protobuf:"bytes,10,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Title         string                 `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	StartDate     string                 `protobuf:"bytes,13,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       string                 `protobuf:"bytes,14,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	AcademicYear  string                 `protobuf:"bytes,15,opt,name=academic_year,json=academicYear,proto3" json:"academic_year,omitempty"`
	AppliesTo     string                 `protobuf:"bytes,16,opt,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAcademicEventRequest) Reset() {
	*x = CreateAcademicEventRequest{}
	mi := &file_calendar_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAcademicEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAcademicEventRequest) ProtoMessage() {}

func (x *CreateAcademicEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAcademicEventRequest.ProtoReflect.Descriptor instead.
func (*CreateAcademicEventRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{13}
}

func (x *CreateAcademicEventRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *CreateAcademicEventRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateAcademicEventRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateAcademicEventRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CreateAcademicEventRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *CreateAcademicEventRequest) GetAcademicYear() string {
	if x != nil {
		return x.AcademicYear
	}
	return ""
}

func (x *CreateAcademicEventRequest) GetAppliesTo() string {
	if x != nil {
		return x.AppliesTo
	}
	return ""
}

type CreateAcademicEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,10,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	Event         *AcademicCalendarEvent `protobuf:"bytes,12,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAcademicEventResponse) Reset() {
	*x = CreateAcademicEventResponse{}
	mi := &file_calendar_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAcademicEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAcademicEventResponse) ProtoMessage() {}

func (x *CreateAcademicEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAcademicEventResponse.ProtoReflect.Descriptor instead.
func (*CreateAcademicEventResponse) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{14}
}

func (x *CreateAcademicEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateAcademicEventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateAcademicEventResponse) GetEvent() *AcademicCalendarEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type GetHolidaysRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StartDate       *string                `protobuf:"bytes,10,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	EndDate         *string                `protobuf:"bytes,11,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
	IncludeWeekends bool                   `protobuf:"varint,12,opt,name=include_weekends,json=includeWeekends,proto3" json:"include_weekends,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetHolidaysRequest) Reset() {
	*x = GetHolidaysRequest{}
	mi := &file_calendar_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHolidaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidaysRequest) ProtoMessage() {}

func (x *GetHolidaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidaysRequest.ProtoReflect.Descriptor instead.
func (*GetHolidaysRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{15}
}

func (x *GetHolidaysRequest) GetStartDate() string {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return ""
}

func (x *GetHolidaysRequest) GetEndDate() string {
	if x != nil && x.EndDate != nil {
		return *x.EndDate
	}
	return ""
}

func (x *GetHolidaysRequest) GetIncludeWeekends() bool {
	if x != nil {
		return x.IncludeWeekends
	}
	return false
}

type GetHolidaysResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,10,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	Holidays      []*Holiday             `protobuf:"bytes,12,rep,name=holidays,proto3" json:"holidays,omitempty"`
	TotalDaysOff  int32                  `protobuf:"varint,13,opt,name=total_days_off,json=totalDaysOff,proto3" json:"total_days_off,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHolidaysResponse) Reset() {
	*x = GetHolidaysResponse{}
	mi := &file_calendar_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHolidaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidaysResponse) ProtoMessage() {}

func (x *GetHolidaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidaysResponse.ProtoReflect.Descriptor instead.
func (*GetHolidaysResponse) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{16}
}

func (x *GetHolidaysResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetHolidaysResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetHolidaysResponse) GetHolidays() []*Holiday {
	if x != nil {
		return x.Holidays
	}
	return nil
}

func (x *GetHolidaysResponse) GetTotalDaysOff() int32 {
	if x != nil {
		return x.TotalDaysOff
	}
	return 0
}

type Holiday struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          string                 `protobuf:"bytes,10,opt,name=date,proto3" json:"date,omitempty"`
	Name          string                 `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	IsFreeDay     bool                   `protobuf:"varint,13,opt,name=is_free_day,json=isFreeDay,proto3" json:"is_free_day,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Holiday) Reset() {
	*x = Holiday{}
	mi := &file_calendar_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Holiday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Holiday) ProtoMessage() {}

func (x *Holiday) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Holiday.ProtoReflect.Descriptor instead.
func (*Holiday) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{17}
}

func (x *Holiday) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Holiday) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Holiday) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Holiday) GetIsFreeDay() bool {
	if x != nil {
		return x.IsFreeDay
	}
	return false
}

var File_calendar_proto protoreflect.FileDescriptor

const file_calendar_proto_rawDesc = "" +
	"\n" +
	"\x0ecalendar.proto\x12\x14modules.calendar.api\x1a\x1cgoogle/api/annotations.proto\"\x91\x02\n" +
	"\rCalendarEvent\x12\x19\n" +
	"\bevent_id\x18\x01 \x01(\x03R\aeventId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"start_time\x18\x04 \x01(\tR\tstartTime\x12\x19\n" +
	"\bend_time\x18\x05 \x01(\tR\aendTime\x12\x1a\n" +
	"\blocation\x18\x06 \x01(\tR\blocation\x12\x1d\n" +
	"\n" +
	"event_type\x18\a \x01(\tR\teventType\x12\x19\n" +
	"\bclass_id\x18\b \x01(\x03R\aclassId\x12\x1d\n" +
	"\n" +
	"created_by\x18\t \x01(\x03R\tcreatedBy\"i\n" +
	"\x14GetUserEventsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1d\n" +
	"\n" +
	"start_date\x18\x02 \x01(\tR\tstartDate\x12\x19\n" +
	"\bend_date\x18\x03 \x01(\tR\aendDate\"\x88\x01\n" +
	"\x15GetUserEventsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12;\n" +
	"\x06events\x18\x03 \x03(\v2#.modules.calendar.api.CalendarEventR\x06events\"\xfb\x01\n" +
	"\x12CreateEventRequest\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"start_time\x18\x03 \x01(\tR\tstartTime\x12\x19\n" +
	"\bend_time\x18\x04 \x01(\tR\aendTime\x12\x1a\n" +
	"\blocation\x18\x05 \x01(\tR\blocation\x12\x1d\n" +
	"\n" +
	"event_type\x18\x06 \x01(\tR\teventType\x12\x19\n" +
	"\bclass_id\x18\a \x01(\x03R\aclassId\x12\x1d\n" +
	"\n" +
	"created_by\x18\b \x01(\x03R\tcreatedBy\"\x84\x01\n" +
	"\x13CreateEventResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x129\n" +
	"\x05event\x18\x03 \x01(\v2#.modules.calendar.api.CalendarEventR\x05event\"n\n" +
	"\x17GetClassScheduleRequest\x12\x19\n" +
	"\bclass_id\x18\x01 \x01(\x03R\aclassId\x12\x1d\n" +
	"\n" +
	"start_date\x18\x02 \x01(\tR\tstartDate\x12\x19\n" +
	"\bend_date\x18\x03 \x01(\tR\aendDate\"\x8b\x01\n" +
	"\x18GetClassScheduleResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12;\n" +
	"\x06events\x18\x03 \x03(\v2#.modules.calendar.api.CalendarEventR\x06events\"\x87\x02\n" +
	"\x15AcademicCalendarEvent\x12\x19\n" +
	"\bevent_id\x18\n" +
	" \x01(\x03R\aeventId\x12\x1d\n" +
	"\n" +
	"event_type\x18\v \x01(\tR\teventType\x12\x14\n" +
	"\x05title\x18\f \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\r \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"start_date\x18\x0e \x01(\tR\tstartDate\x12\x19\n" +
	"\bend_date\x18\x0f \x01(\tR\aendDate\x12#\n" +
	"\racademic_year\x18\x10 \x01(\tR\facademicYear\x12\x1d\n" +
	"\n" +
	"applies_to\x18\x11 \x01(\tR\tappliesTo\"\xeb\x01\n" +
	"\x1aGetAcademicCalendarRequest\x12\"\n" +
	"\n" +
	"start_date\x18\n" +
	" \x01(\tH\x00R\tstartDate\x88\x01\x01\x12\x1e\n" +
	"\bend_date\x18\v \x01(\tH\x01R\aendDate\x88\x01\x01\x12(\n" +
	"\racademic_year\x18\f \x01(\tH\x02R\facademicYear\x88\x01\x01\x12\"\n" +
	"\n" +
	"event_type\x18\r \x01(\tH\x03R\teventType\x88\x01\x01B\r\n" +
	"\v_start_dateB\v\n" +
	"\t_end_dateB\x10\n" +
	"\x0e_academic_yearB\r\n" +
	"\v_event_type\"\xf2\x01\n" +
	"\x1bGetAcademicCalendarResponse\x12\x18\n" +
	"\asuccess\x18\n" +
	" \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\v \x01(\tR\amessage\x12C\n" +
	"\x06events\x18\f \x03(\v2+.modules.calendar.api.AcademicCalendarEventR\x06events\x12Z\n" +
	"\x15current_academic_year\x18\r \x01(\v2&.modules.calendar.api.AcademicYearInfoR\x13currentAcademicYear\"\xb2\x02\n" +
	"\x10AcademicYearInfo\x12\x12\n" +
	"\x04year\x18\n" +
	" \x01(\tR\x04year\x12)\n" +
	"\x10current_semester\x18\v \x01(\tR\x0fcurrentSemester\x12!\n" +
	"\fcurrent_week\x18\f \x01(\x05R\vcurrentWeek\x12%\n" +
	"\x0esemester_start\x18\r \x01(\tR\rsemesterStart\x12!\n" +
	"\fsemester_end\x18\x0e \x01(\tR\vsemesterEnd\x12,\n" +
	"\x12exam_session_start\x18\x0f \x01(\tR\x10examSessionStart\x12(\n" +
	"\x10exam_session_end\x18\x10 \x01(\tR\x0eexamSessionEnd\x12\x1a\n" +
	"\bholidays\x18\x11 \x03(\tR\bholidays\"\x1f\n" +
	"\x1dGetCurrentSemesterInfoRequest\"\xa1\x01\n" +
	"\x1eGetCurrentSemesterInfoResponse\x12\x18\n" +
	"\asuccess\x18\n" +
	" \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\v \x01(\tR\amessage\x12K\n" +
	"\rsemester_info\x18\f \x01(\v2&.modules.calendar.api.AcademicYearInfoR\fsemesterInfo\"\xf1\x01\n" +
	"\x1aCreateAcademicEventRequest\x12\x1d\n" +
	"\n" +
	"event_type\x18\n" +
	" \x01(\tR\teventType\x12\x14\n" +
	"\x05title\x18\v \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\f \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"start_date\x18\r \x01(\tR\tstartDate\x12\x19\n" +
	"\bend_date\x18\x0e \x01(\tR\aendDate\x12#\n" +
	"\racademic_year\x18\x0f \x01(\tR\facademicYear\x12\x1d\n" +
	"\n" +
	"applies_to\x18\x10 \x01(\tR\tappliesTo\"\x94\x01\n" +
	"\x1bCreateAcademicEventResponse\x12\x18\n" +
	"\asuccess\x18\n" +
	" \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\v \x01(\tR\amessage\x12A\n" +
	"\x05event\x18\f \x01(\v2+.modules.calendar.api.AcademicCalendarEventR\x05event\"\x9f\x01\n" +
	"\x12GetHolidaysRequest\x12\"\n" +
	"\n" +
	"start_date\x18\n" +
	" \x01(\tH\x00R\tstartDate\x88\x01\x01\x12\x1e\n" +
	"\bend_date\x18\v \x01(\tH\x01R\aendDate\x88\x01\x01\x12)\n" +
	"\x10include_weekends\x18\f \x01(\bR\x0fincludeWeekendsB\r\n" +
	"\v_start_dateB\v\n" +
	"\t_end_date\"\xaa\x01\n" +
	"\x13GetHolidaysResponse\x12\x18\n" +
	"\asuccess\x18\n" +
	" \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\v \x01(\tR\amessage\x129\n" +
	"\bholidays\x18\f \x03(\v2\x1d.modules.calendar.api.HolidayR\bholidays\x12$\n" +
	"\x0etotal_days_off\x18\r \x01(\x05R\ftotalDaysOff\"e\n" +
	"\aHoliday\x12\x12\n" +
	"\x04date\x18\n" +
	" \x01(\tR\x04date\x12\x12\n" +
	"\x04name\x18\v \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\f \x01(\tR\x04type\x12\x1e\n" +
	"\vis_free_day\x18\r \x01(\bR\tisFreeDay2\xc4\b\n" +
	"\x0fCalendarService\x12\x95\x01\n" +
	"\rGetUserEvents\x12*.modules.calendar.api.GetUserEventsRequest\x1a+.modules.calendar.api.GetUserEventsResponse\"+\x82\xd3\xe4\x93\x02%\x12#/api/calendar/user/{user_id}/events\x12\x83\x01\n" +
	"\vCreateEvent\x12(.modules.calendar.api.CreateEventRequest\x1a).modules.calendar.api.CreateEventResponse\"\x1f\x82\xd3\xe4\x93\x02\x19:\x01*\"\x14/api/calendar/events\x12\xa2\x01\n" +
	"\x10GetClassSchedule\x12-.modules.calendar.api.GetClassScheduleRequest\x1a..modules.calendar.api.GetClassScheduleResponse\"/\x82\xd3\xe4\x93\x02)\x12'/api/calendar/class/{class_id}/schedule\x12\x9a\x01\n" +
	"\x13GetAcademicCalendar\x120.modules.calendar.api.GetAcademicCalendarRequest\x1a1.modules.calendar.api.GetAcademicCalendarResponse\"\x1e\x82\xd3\xe4\x93\x02\x18\x12\x16/api/calendar/academic\x12\xab\x01\n" +
	"\x16GetCurrentSemesterInfo\x123.modules.calendar.api.GetCurrentSemesterInfoRequest\x1a4.modules.calendar.api.GetCurrentSemesterInfoResponse\"&\x82\xd3\xe4\x93\x02 \x12\x1e/api/calendar/semester/current\x12\x9d\x01\n" +
	"\x13CreateAcademicEvent\x120.modules.calendar.api.CreateAcademicEventRequest\x1a1.modules.calendar.api.CreateAcademicEventResponse\"!\x82\xd3\xe4\x93\x02\x1b:\x01*\"\x16/api/calendar/academic\x12\x82\x01\n" +
	"\vGetHolidays\x12(.modules.calendar.api.GetHolidaysRequest\x1a).modules.calendar.api.GetHolidaysResponse\"\x1e\x82\xd3\xe4\x93\x02\x18\x12\x16/api/calendar/holidaysBNZLgithub.com/slomus/USOSWEB/src/backend/modules/calendar/gen/calendar;calendarb\x06proto3"

var (
	file_calendar_proto_rawDescOnce sync.Once
	file_calendar_proto_rawDescData []byte
)

func file_calendar_proto_rawDescGZIP() []byte {
	file_calendar_proto_rawDescOnce.Do(func() {
		file_calendar_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_calendar_proto_rawDesc), len(file_calendar_proto_rawDesc)))
	})
	return file_calendar_proto_rawDescData
}

var file_calendar_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_calendar_proto_goTypes = []any{
	(*CalendarEvent)(nil),                  // 0: modules.calendar.api.CalendarEvent
	(*GetUserEventsRequest)(nil),           // 1: modules.calendar.api.GetUserEventsRequest
	(*GetUserEventsResponse)(nil),          // 2: modules.calendar.api.GetUserEventsResponse
	(*CreateEventRequest)(nil),             // 3: modules.calendar.api.CreateEventRequest
	(*CreateEventResponse)(nil),            // 4: modules.calendar.api.CreateEventResponse
	(*GetClassScheduleRequest)(nil),        // 5: modules.calendar.api.GetClassScheduleRequest
	(*GetClassScheduleResponse)(nil),       // 6: modules.calendar.api.GetClassScheduleResponse
	(*AcademicCalendarEvent)(nil),          // 7: modules.calendar.api.AcademicCalendarEvent
	(*GetAcademicCalendarRequest)(nil),     // 8: modules.calendar.api.GetAcademicCalendarRequest
	(*GetAcademicCalendarResponse)(nil),    // 9: modules.calendar.api.GetAcademicCalendarResponse
	(*AcademicYearInfo)(nil),               // 10: modules.calendar.api.AcademicYearInfo
	(*GetCurrentSemesterInfoRequest)(nil),  // 11: modules.calendar.api.GetCurrentSemesterInfoRequest
	(*GetCurrentSemesterInfoResponse)(nil), // 12: modules.calendar.api.GetCurrentSemesterInfoResponse
	(*CreateAcademicEventRequest)(nil),     // 13: modules.calendar.api.CreateAcademicEventRequest
	(*CreateAcademicEventResponse)(nil),    // 14: modules.calendar.api.CreateAcademicEventResponse
	(*GetHolidaysRequest)(nil),             // 15: modules.calendar.api.GetHolidaysRequest
	(*GetHolidaysResponse)(nil),            // 16: modules.calendar.api.GetHolidaysResponse
	(*Holiday)(nil),                        // 17: modules.calendar.api.Holiday
}
var file_calendar_proto_depIdxs = []int32{
	0,  // 0: modules.calendar.api.GetUserEventsResponse.events:type_name -> modules.calendar.api.CalendarEvent
	0,  // 1: modules.calendar.api.CreateEventResponse.event:type_name -> modules.calendar.api.CalendarEvent
	0,  // 2: modules.calendar.api.GetClassScheduleResponse.events:type_name -> modules.calendar.api.CalendarEvent
	7,  // 3: modules.calendar.api.GetAcademicCalendarResponse.events:type_name -> modules.calendar.api.AcademicCalendarEvent
	10, // 4: modules.calendar.api.GetAcademicCalendarResponse.current_academic_year:type_name -> modules.calendar.api.AcademicYearInfo
	10, // 5: modules.calendar.api.GetCurrentSemesterInfoResponse.semester_info:type_name -> modules.calendar.api.AcademicYearInfo
	7,  // 6: modules.calendar.api.CreateAcademicEventResponse.event:type_name -> modules.calendar.api.AcademicCalendarEvent
	17, // 7: modules.calendar.api.GetHolidaysResponse.holidays:type_name -> modules.calendar.api.Holiday
	1,  // 8: modules.calendar.api.CalendarService.GetUserEvents:input_type -> modules.calendar.api.GetUserEventsRequest
	3,  // 9: modules.calendar.api.CalendarService.CreateEvent:input_type -> modules.calendar.api.CreateEventRequest
	5,  // 10: modules.calendar.api.CalendarService.GetClassSchedule:input_type -> modules.calendar.api.GetClassScheduleRequest
	8,  // 11: modules.calendar.api.CalendarService.GetAcademicCalendar:input_type -> modules.calendar.api.GetAcademicCalendarRequest
	11, // 12: modules.calendar.api.CalendarService.GetCurrentSemesterInfo:input_type -> modules.calendar.api.GetCurrentSemesterInfoRequest
	13, // 13: modules.calendar.api.CalendarService.CreateAcademicEvent:input_type -> modules.calendar.api.CreateAcademicEventRequest
	15, // 14: modules.calendar.api.CalendarService.GetHolidays:input_type -> modules.calendar.api.GetHolidaysRequest
	2,  // 15: modules.calendar.api.CalendarService.GetUserEvents:output_type -> modules.calendar.api.GetUserEventsResponse
	4,  // 16: modules.calendar.api.CalendarService.CreateEvent:output_type -> modules.calendar.api.CreateEventResponse
	6,  // 17: modules.calendar.api.CalendarService.GetClassSchedule:output_type -> modules.calendar.api.GetClassScheduleResponse
	9,  // 18: modules.calendar.api.CalendarService.GetAcademicCalendar:output_type -> modules.calendar.api.GetAcademicCalendarResponse
	12, // 19: modules.calendar.api.CalendarService.GetCurrentSemesterInfo:output_type -> modules.calendar.api.GetCurrentSemesterInfoResponse
	14, // 20: modules.calendar.api.CalendarService.CreateAcademicEvent:output_type -> modules.calendar.api.CreateAcademicEventResponse
	16, // 21: modules.calendar.api.CalendarService.GetHolidays:output_type -> modules.calendar.api.GetHolidaysResponse
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_calendar_proto_init() }
func file_calendar_proto_init() {
	if File_calendar_proto != nil {
		return
	}
	file_calendar_proto_msgTypes[8].OneofWrappers = []any{}
	file_calendar_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_calendar_proto_rawDesc), len(file_calendar_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_calendar_proto_goTypes,
		DependencyIndexes: file_calendar_proto_depIdxs,
		MessageInfos:      file_calendar_proto_msgTypes,
	}.Build()
	File_calendar_proto = out.File
	file_calendar_proto_goTypes = nil
	file_calendar_proto_depIdxs = nil
}
