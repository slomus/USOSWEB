// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: calendar.proto

package calendar

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CalendarService_GetUserEvents_FullMethodName          = "/modules.calendar.api.CalendarService/GetUserEvents"
	CalendarService_CreateEvent_FullMethodName            = "/modules.calendar.api.CalendarService/CreateEvent"
	CalendarService_GetClassSchedule_FullMethodName       = "/modules.calendar.api.CalendarService/GetClassSchedule"
	CalendarService_GetAcademicCalendar_FullMethodName    = "/modules.calendar.api.CalendarService/GetAcademicCalendar"
	CalendarService_GetCurrentSemesterInfo_FullMethodName = "/modules.calendar.api.CalendarService/GetCurrentSemesterInfo"
	CalendarService_CreateAcademicEvent_FullMethodName    = "/modules.calendar.api.CalendarService/CreateAcademicEvent"
	CalendarService_GetHolidays_FullMethodName            = "/modules.calendar.api.CalendarService/GetHolidays"
)

// CalendarServiceClient is the client API for CalendarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Calendar Service
type CalendarServiceClient interface {
	GetUserEvents(ctx context.Context, in *GetUserEventsRequest, opts ...grpc.CallOption) (*GetUserEventsResponse, error)
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	GetClassSchedule(ctx context.Context, in *GetClassScheduleRequest, opts ...grpc.CallOption) (*GetClassScheduleResponse, error)
	GetAcademicCalendar(ctx context.Context, in *GetAcademicCalendarRequest, opts ...grpc.CallOption) (*GetAcademicCalendarResponse, error)
	GetCurrentSemesterInfo(ctx context.Context, in *GetCurrentSemesterInfoRequest, opts ...grpc.CallOption) (*GetCurrentSemesterInfoResponse, error)
	CreateAcademicEvent(ctx context.Context, in *CreateAcademicEventRequest, opts ...grpc.CallOption) (*CreateAcademicEventResponse, error)
	GetHolidays(ctx context.Context, in *GetHolidaysRequest, opts ...grpc.CallOption) (*GetHolidaysResponse, error)
}

type calendarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarServiceClient(cc grpc.ClientConnInterface) CalendarServiceClient {
	return &calendarServiceClient{cc}
}

func (c *calendarServiceClient) GetUserEvents(ctx context.Context, in *GetUserEventsRequest, opts ...grpc.CallOption) (*GetUserEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserEventsResponse)
	err := c.cc.Invoke(ctx, CalendarService_GetUserEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEventResponse)
	err := c.cc.Invoke(ctx, CalendarService_CreateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) GetClassSchedule(ctx context.Context, in *GetClassScheduleRequest, opts ...grpc.CallOption) (*GetClassScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClassScheduleResponse)
	err := c.cc.Invoke(ctx, CalendarService_GetClassSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) GetAcademicCalendar(ctx context.Context, in *GetAcademicCalendarRequest, opts ...grpc.CallOption) (*GetAcademicCalendarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAcademicCalendarResponse)
	err := c.cc.Invoke(ctx, CalendarService_GetAcademicCalendar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) GetCurrentSemesterInfo(ctx context.Context, in *GetCurrentSemesterInfoRequest, opts ...grpc.CallOption) (*GetCurrentSemesterInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentSemesterInfoResponse)
	err := c.cc.Invoke(ctx, CalendarService_GetCurrentSemesterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) CreateAcademicEvent(ctx context.Context, in *CreateAcademicEventRequest, opts ...grpc.CallOption) (*CreateAcademicEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAcademicEventResponse)
	err := c.cc.Invoke(ctx, CalendarService_CreateAcademicEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarServiceClient) GetHolidays(ctx context.Context, in *GetHolidaysRequest, opts ...grpc.CallOption) (*GetHolidaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHolidaysResponse)
	err := c.cc.Invoke(ctx, CalendarService_GetHolidays_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServiceServer is the server API for CalendarService service.
// All implementations must embed UnimplementedCalendarServiceServer
// for forward compatibility.
//
// Calendar Service
type CalendarServiceServer interface {
	GetUserEvents(context.Context, *GetUserEventsRequest) (*GetUserEventsResponse, error)
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	GetClassSchedule(context.Context, *GetClassScheduleRequest) (*GetClassScheduleResponse, error)
	GetAcademicCalendar(context.Context, *GetAcademicCalendarRequest) (*GetAcademicCalendarResponse, error)
	GetCurrentSemesterInfo(context.Context, *GetCurrentSemesterInfoRequest) (*GetCurrentSemesterInfoResponse, error)
	CreateAcademicEvent(context.Context, *CreateAcademicEventRequest) (*CreateAcademicEventResponse, error)
	GetHolidays(context.Context, *GetHolidaysRequest) (*GetHolidaysResponse, error)
	mustEmbedUnimplementedCalendarServiceServer()
}

// UnimplementedCalendarServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCalendarServiceServer struct{}

func (UnimplementedCalendarServiceServer) GetUserEvents(context.Context, *GetUserEventsRequest) (*GetUserEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEvents not implemented")
}
func (UnimplementedCalendarServiceServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedCalendarServiceServer) GetClassSchedule(context.Context, *GetClassScheduleRequest) (*GetClassScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassSchedule not implemented")
}
func (UnimplementedCalendarServiceServer) GetAcademicCalendar(context.Context, *GetAcademicCalendarRequest) (*GetAcademicCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcademicCalendar not implemented")
}
func (UnimplementedCalendarServiceServer) GetCurrentSemesterInfo(context.Context, *GetCurrentSemesterInfoRequest) (*GetCurrentSemesterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSemesterInfo not implemented")
}
func (UnimplementedCalendarServiceServer) CreateAcademicEvent(context.Context, *CreateAcademicEventRequest) (*CreateAcademicEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAcademicEvent not implemented")
}
func (UnimplementedCalendarServiceServer) GetHolidays(context.Context, *GetHolidaysRequest) (*GetHolidaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHolidays not implemented")
}
func (UnimplementedCalendarServiceServer) mustEmbedUnimplementedCalendarServiceServer() {}
func (UnimplementedCalendarServiceServer) testEmbeddedByValue()                         {}

// UnsafeCalendarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalendarServiceServer will
// result in compilation errors.
type UnsafeCalendarServiceServer interface {
	mustEmbedUnimplementedCalendarServiceServer()
}

func RegisterCalendarServiceServer(s grpc.ServiceRegistrar, srv CalendarServiceServer) {
	// If the following call pancis, it indicates UnimplementedCalendarServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CalendarService_ServiceDesc, srv)
}

func _CalendarService_GetUserEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).GetUserEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarService_GetUserEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).GetUserEvents(ctx, req.(*GetUserEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarService_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_GetClassSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).GetClassSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarService_GetClassSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).GetClassSchedule(ctx, req.(*GetClassScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_GetAcademicCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAcademicCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).GetAcademicCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarService_GetAcademicCalendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).GetAcademicCalendar(ctx, req.(*GetAcademicCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_GetCurrentSemesterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentSemesterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).GetCurrentSemesterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarService_GetCurrentSemesterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).GetCurrentSemesterInfo(ctx, req.(*GetCurrentSemesterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_CreateAcademicEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAcademicEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).CreateAcademicEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarService_CreateAcademicEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).CreateAcademicEvent(ctx, req.(*CreateAcademicEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalendarService_GetHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServiceServer).GetHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalendarService_GetHolidays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServiceServer).GetHolidays(ctx, req.(*GetHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalendarService_ServiceDesc is the grpc.ServiceDesc for CalendarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalendarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modules.calendar.api.CalendarService",
	HandlerType: (*CalendarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserEvents",
			Handler:    _CalendarService_GetUserEvents_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _CalendarService_CreateEvent_Handler,
		},
		{
			MethodName: "GetClassSchedule",
			Handler:    _CalendarService_GetClassSchedule_Handler,
		},
		{
			MethodName: "GetAcademicCalendar",
			Handler:    _CalendarService_GetAcademicCalendar_Handler,
		},
		{
			MethodName: "GetCurrentSemesterInfo",
			Handler:    _CalendarService_GetCurrentSemesterInfo_Handler,
		},
		{
			MethodName: "CreateAcademicEvent",
			Handler:    _CalendarService_CreateAcademicEvent_Handler,
		},
		{
			MethodName: "GetHolidays",
			Handler:    _CalendarService_GetHolidays_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar.proto",
}
