services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: mydb
    ports:
      - '5433:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  migrate:
    build:
      context: ./src/backend
      dockerfile: database/Dockerfile
    env_file:
      - ./src/backend/.env
    environment:
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-mysecretpassword}
      DB_NAME: ${DB_NAME:-mydb}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      LOG_LEVEL: info
      LOG_FILE: /app/logs/migration-service.log
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    command: up
    entrypoint: ["/app/migrate"]

  seeder:
    image: postgres:latest
    environment:
      PGPASSWORD: mysecretpassword
    volumes:
      - ./src/backend/database/seeds:/seeds
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "psql -h postgres -U postgres -d mydb -f /seeds/mock_data.sql"
    restart: "no"
    profiles:
      - seeder

  api-gateway:
    build:
      context: ./src/backend
      dockerfile: modules/api-gateway/Dockerfile
    ports:
      - "8083:8083"
    environment:
      - ENV=development
      - LOG_LEVEL=info
      - LOG_FILE=/app/logs/api-gateway.log
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/app:cached
      - /app/node_modules

    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8083
    stdin_open: true
    tty: true

  calendar:
    build:
      context: ./src/backend
      dockerfile: modules/calendar/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - ENV=development
      - LOG_LEVEL=info
      - LOG_FILE=/app/logs/calendar-service.log
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      api-gateway:
        condition: service_started

  messaging:
    build:
      context: ./src/backend
      dockerfile: modules/messaging/Dockerfile
    ports:
      - "3002:3002"
    environment:
      - ENV=development
      - LOG_LEVEL=info
      - LOG_FILE=/app/logs/messaging-service.log
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      api-gateway:
        condition: service_started

  common:
    build:
      context: ./src/backend
      dockerfile: modules/common/Dockerfile
    ports:
      - "50051:50051"
    environment:
      - ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=mysecretpassword
      - DB_NAME=mydb
      - DB_SSLMODE=disable
      - LOG_LEVEL=info
      - LOG_FILE=/app/logs/auth-service.log
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      api-gateway:
        condition: service_started

volumes:
  postgres_data:
